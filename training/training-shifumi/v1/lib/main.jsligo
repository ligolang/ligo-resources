#import "utils/options.jsligo" "Options"
#import "errors.jsligo" "Errors"
#import "action.jsligo" "Action"
#import "round_value.jsligo" "RoundValue"
#import "round.jsligo" "Round"
#import "storage.jsligo" "Storage"

const play = (storage:Storage.t, player_address:address, action: Action.t) : Storage.t => {
    const round = Options.get_exn(Storage.get_current_round(storage), Errors.invalid_round);
    const player = Options.get_exn(Storage.get_player(storage, player_address), Errors.user_not_allowed_to_play);

    failwith("Should apply the action if possible otherwise fail");
};

const conclude = (storage:Storage.t): [list<operation>, Storage.t] => {
    failwith("Should conclude the current round if possible otherwise fail");
};

export type parameter = 
| ["Play", Action.t] 
| ["Conclude"];

export const main = (parameter:parameter, storage:Storage.t) : [list<operation>, Storage.t] => {
    failwith("Apply the action or conclude the game if possible");
};

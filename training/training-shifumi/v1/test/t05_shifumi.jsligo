#import "common/assert.mligo" "Assert"
#import "../lib/player.jsligo" "Player"
#import "../lib/errors.jsligo" "Errors"
#import "../lib/action.jsligo" "Action"
#import "../lib/main.jsligo" "Contract"

type player = {
    address: address,
    secret: nat
};

// prepare players
const _:unit = Test.reset_state((3 as nat),(list([]) as list<tez>));
const alice: player = { address : Test.nth_bootstrap_account(0), secret: 42 as nat };
const bob: player = { address : Test.nth_bootstrap_account(1), secret: 24 as nat };
const james: address = Test.nth_bootstrap_account(2);

// Contract origination
const get_contract = (storage:Contract.Storage.t) : contract<Contract.parameter> => {
    const originated = Test.originate(Contract.main, storage, 0 as tez);
    return (Test.to_contract(originated[0]) as contract<Contract.parameter>); 
};

// ----------------------------------
// Test cases
// ----------------------------------

const alice_play = () : string => {
    // Given
    const contract = get_contract(Contract.Storage.initial_game(alice.address, bob.address));

    // When
    Test.set_source(alice.address);
    const result = Test.transfer_to_contract(contract, Play(Action.paper), 0 as tez);
    
    // Then
    Assert.assert_success(result);

    return "✅";
};

const alice_conclude = () : string => {
    // Given
    const contract = get_contract(Contract.Storage.initial_game(alice.address, bob.address));

    // When
    Test.set_source(alice.address);
    const result = Test.transfer_to_contract(contract, Conclude(), 0 as tez);
    
    // Then
    Assert.assert_string_failure(result, Errors.cannot_conclude);

    return "✅";
};

const alice_play_twice = () : string => {
    // Given
    const contract = get_contract(Contract.Storage.initial_game(alice.address, bob.address));
    Test.set_source(alice.address);
    const material = Action.paper;
    const _ = Test.transfer_to_contract(contract, Play(material), 0 as tez);

    // When
    const result = Test.transfer_to_contract(contract, Play(material), 0 as tez);
    
    // Then
    Assert.assert_string_failure(result, Errors.user_not_allowed_to_play);

    return "✅";
};

const alice_play_and_conclude = () : string => {
    // Given
    const contract = get_contract(Contract.Storage.initial_game(alice.address, bob.address));
    Test.set_source(alice.address);
    const material = Action.paper;
    const _ = Test.transfer_to_contract(contract, Play(material), 0 as tez);

    // When
    const result = Test.transfer_to_contract(contract, Conclude(), 0 as tez);
    
    // Then
    Assert.assert_string_failure(result, Errors.cannot_conclude);

    return "✅";
};

const alice_play_bob_play = () : string => {
    // Given
    const contract = get_contract(Contract.Storage.initial_game(alice.address, bob.address));
    Test.set_source(alice.address);
    const material_alice = Action.paper;
    const _ = Test.transfer_to_contract(contract, Play(material_alice), 0 as tez);

    // When
    Test.set_source(bob.address);
    const material_bob = Action.scissor;
    const result = Test.transfer_to_contract(contract, Play(material_bob), 0 as tez);
  
    // Then
    Assert.assert_success(result);
    
    return "✅";
};

const alice_play_bob_play_and_conclude = () : string => {
    // Given
    const contract = get_contract(Contract.Storage.initial_game(alice.address, bob.address));
    Test.set_source(alice.address);
    const material_alice = Action.paper;
    const _ = Test.transfer_to_contract(contract, Play(material_alice), 0 as tez);
    Test.set_source(bob.address);
    const material_bob = Action.scissor;
    const _ = Test.transfer_to_contract(contract, Play(material_bob), 0 as tez);

    // When
    const result = Test.transfer_to_contract(contract, Conclude(), 0 as tez);

    // Then
    Assert.assert_success(result);
    
    return "✅";
};

const james_cannot_play = () : string => {
    // Given
    const contract = get_contract(Contract.Storage.initial_game(alice.address, bob.address));

    // When
    Test.set_source(james);
    const material = Action.paper;
    const result = Test.transfer_to_contract(contract, Play(material), 0 as tez);

    // Then
    Assert.assert_string_failure(result, Errors.user_not_allowed_to_play)
    
    return "✅";
};

const test_alice_play = alice_play ();
const test_alice_conclude = alice_conclude ();
const test_alice_play_twice = alice_play_twice ();
const test_alice_play_and_conclude = alice_play_and_conclude ();
const test_alice_play_bob_play = alice_play_bob_play ();
const test_alice_play_bob_play_and_conclude = alice_play_bob_play_and_conclude();const test_james_cannot_play = james_cannot_play ();


const why_this_solution_is_not_a_good_one = () : unit => {
    const get_contract_address = (storage:Contract.Storage.t) : typed_address<Contract.parameter, Contract.Storage.t> => {
        const originated = Test.originate(Contract.main, storage, 0 as tez);
        return originated[0] as typed_address<Contract.parameter, Contract.Storage.t>;
    };

    const get_contract = (address:typed_address<Contract.parameter, Contract.Storage.t>) : contract<Contract.parameter> => {
        return Test.to_contract(address) as contract<Contract.parameter>; 
    };

    const contract_address = get_contract_address(Contract.Storage.initial_game(alice.address, bob.address));
    const contract = get_contract(contract_address);

    Test.set_source(alice.address);
    const material = Action.paper;
    const _ = Test.transfer_to_contract(contract, Play(material), 10 as tez);

    Test.log(Test.get_storage(contract_address));

}

const test_why_this_solution_is_not_a_good_one = why_this_solution_is_not_a_good_one ();

#import "action.jsligo" "Action"

export type t = 
| ["Waiting"] 
| ["Played", [chest, tez]] 
| ["Revealed", [Action.t, tez]];

export const waiting : t = Waiting();

export const is_waiting = (round_value:t) : bool => {
    return match(round_value, {
        Waiting: () => true,
        Played: _p => false,
        Revealed: _p => false
    });
};

export const is_played = (round_value:t) : bool => {
    return match(round_value, {
        Waiting: () => false,
        Played: _p => true,
        Revealed: _p => false
    });
};

export const is_revealed = (round_value:t) : bool => {
    return match(round_value, {
        Waiting: () => false,
        Played: _p => false,
        Revealed: _p => true
    });
};

export const play = (round_value:t, action:chest, amount:tez) : t => {
    return match(round_value, {
        Waiting: () => Played([action,amount]),
        Played: p => Played(p),
        Revealed: p => Revealed(p)
    });
};

export const reveal = (round_value:t, decode: (chest:chest) => Action.t) : t => {
    return match(round_value, {
        Waiting: () => Waiting(),
        Played: p => Revealed ([ decode(p[0]), p[1] ]),
        Revealed : p => Revealed (p)
    });
};

export const get_revealed = (round_value_player1:t, round_value_player2:t) : option<{player1:[Action.t,tez],player2:[Action.t,tez]}> => {
    match(round_value_player1, {
        Waiting: () => None (),
        Played: _p => None (),
        Revealed: p1 => {
            match(round_value_player2, {
                Waiting: () => None (),
                Played: _p => None (),
                Revealed: p2 => Some ({player1:p1, player2:p2})
            })
        }
    })
};
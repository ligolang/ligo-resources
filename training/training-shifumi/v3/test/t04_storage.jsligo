#import "common/check.jsligo" "Check"
#import "../lib/utils/options.jsligo" "Options"
#import "../lib/player.jsligo" "Player"
#import "../lib/action.jsligo" "Action"
#import "../lib/round_value.jsligo" "RoundValue"
#import "../lib/round.jsligo" "Round"
#import "../lib/storage.jsligo" "Storage"
 
const get_play = ([play, secret]: [Action.t, nat]) : chest => {
    const payload = Bytes.pack(play);
    return (Test.create_chest(payload, secret))[0];
};

const _:unit = Test.reset_state((3 as nat),(list([]) as list<tez>));
const alice = Test.nth_bootstrap_account(0);
const bob = Test.nth_bootstrap_account(1);
const james = Test.nth_bootstrap_account(2);

// ---

const case01 = (): unit => {
    // Given
    const storage = Storage.initial_game(alice, bob);

    // When
    const round = Storage.get_current_round(storage);

    // Then
    Check.assert_equal(round, Some (Round.fresh_round));   
};

// ---

const case02 = (): unit => {
    // Given
    const storage = Storage.initial_game(alice, bob);

    // When
    const player = Storage.get_player(storage, alice);

    // Then
    Check.assert_equal(player, Some (Player.player1));   
};

const case03 = (): unit => {
    // Given
    const storage = Storage.initial_game(alice, bob);

    // When
    const player = Storage.get_player(storage, bob);

    // Then
    Check.assert_equal(player, Some (Player.player2));   
};

const case04 = (): unit => {
    // Given
    const storage = Storage.initial_game(alice, bob);

    // When
    const player = Storage.get_player(storage, james);

    // Then
    Check.assert_equal(player, None () as option<Player.t>);   
};

// ---

const case05 = (): unit => {
    // Given
    const storage = Storage.initial_game(alice, bob);
    const round = Options.get_exn(Storage.get_current_round(storage), "no round");
    const new_round = Round.play(round, Player.player1, get_play(Action.scissor, 42 as nat), 1 as tez);

    // When
    const new_storage = Storage.update_round(storage, new_round);

    // Then
    const current_round = Options.get_exn(Storage.get_current_round(new_storage), "no round");
    Check.assert_equal(RoundValue.is_played(Round.get_round_value(current_round, Player.player1)), true);   
};

const case06 = (): unit => {
    // Given
    const storage = Storage.initial_game(alice, bob);
    const round = Options.get_exn(Storage.get_current_round(storage), "no round");
    const new_round = Round.play(round, Player.player1, get_play(Action.scissor, 42 as nat), 1 as tez);

    // When
    const new_storage = Storage.update_round(storage, new_round);

    // Then
    const current_round = Options.get_exn(Storage.get_current_round(new_storage), "no round");
    Check.assert_equal(RoundValue.is_waiting(Round.get_round_value(current_round, Player.player2)), true);   
};

// ---

const tests = Check.cases(list([ 
    case01, case02, case03, case04, case05, case06
]));
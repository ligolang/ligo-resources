#import "common/check.jsligo" "Check"
#import "../lib/player.jsligo" "Player"
#import "../lib/action.jsligo" "Action"
#import "../lib/round_value.jsligo" "RoundValue"
#import "../lib/round.jsligo" "Round"
 
const get_play = ([play, secret]: [Action.t, nat]) : chest => {
    const payload = Bytes.pack(play);
    return (Test.create_chest(payload, secret))[0];
};

// ---

const case01 = (): unit => {
    // Given
    const round = Round.fresh_round;

    // When
    const round_value = Round.get_round_value(round, Player.player1);

    // Then
    Check.assert_equal(RoundValue.is_waiting(round_value), true);   
};

const case02 = (): unit => {
    // Given
    const round = Round.fresh_round;

    // When
    const round_value = Round.get_round_value(round, Player.player2);

    // Then
    Check.assert_equal(RoundValue.is_waiting(round_value), true);   
};

const case03 = (): unit => {
    // Given
    const round = Round.fresh_round;

    // When
    const new_round = Round.play(round, Player.player1, get_play(Action.scissor, 42 as nat), 1 as tez);

    // Then
    Check.assert_equal(RoundValue.is_played(Round.get_round_value(new_round, Player.player1)), true);   
};

const case04 = (): unit => {
    // Given
    const round = Round.fresh_round;

    // When
    const new_round = Round.play(round, Player.player1, get_play(Action.scissor, 42 as nat), 1 as tez);

    // Then
    Check.assert_equal(RoundValue.is_waiting(Round.get_round_value(new_round, Player.player2)), true);   
};

// ---

const case05 = (): unit => {
    // Given
    const round = Round.play(Round.fresh_round, Player.player1, get_play(Action.scissor, 42 as nat), 1 as tez);

    // When
    const new_round = Round.reveal(round, Player.player1, (chest:chest) => Action.scissor);

    // Then
    Check.assert_equal(RoundValue.is_revealed(Round.get_round_value(new_round, Player.player1)), true);   
};

const case06 = (): unit => {
    // Given
    const round = Round.play(Round.fresh_round, Player.player1, get_play(Action.scissor, 42 as nat), 1 as tez);

    // When
    const new_round = Round.reveal(round, Player.player1, (chest:chest) => Action.scissor);

    // Then
    Check.assert_equal(RoundValue.is_revealed(Round.get_round_value(new_round, Player.player2)), false);   
};

// ---

const tests = Check.cases(list([ 
    case01, case02, case03, case04, case05, case06
]));
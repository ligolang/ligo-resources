export namespace Utils {

   

    const power = ([x, y] : [nat, nat]) : nat => {
        let multiply = ([acc, elt, last]: [nat, nat, nat] ) : nat => { if (last == (0 as nat)) { return acc } else { return multiply(acc * elt, elt, abs(last - (1 as nat))) } };
        return multiply((1 as nat), x, y)
    };
        

    const hexa_to_nat = (hexa : bytes) : nat => {
        let _check_size : unit = assert_with_error( (Bytes.length(hexa) == (1 as nat)), "Can only convert 1 byte");
        let result : nat = (0 as nat);
        switch (hexa) {
            case 0x00: result = (0 as nat); break;
            case 0x01: result = (1 as nat); break;
            case 0x02: result = (2 as nat); break;
            case 0x03: result = (3 as nat); break;
            case 0x04: result = (4 as nat); break;
            case 0x05: result = (5 as nat); break;
            case 0x06: result = (6 as nat); break;
            case 0x07: result = (7 as nat); break;
            case 0x08: result = (8 as nat); break;
            case 0x09: result = (9 as nat); break;
            case 0x0A: result = (10 as nat); break;
            case 0x0B: result = (11 as nat); break;
            case 0x0C: result = (12 as nat); break;
            case 0x0D: result = (13 as nat); break;
            case 0x0E: result = (14 as nat); break;
            case 0x0F: result = (15 as nat); break;
            case 0x10: result = (16 as nat); break;
            case 0x11: result = (17 as nat); break;
            case 0x12: result = (18 as nat); break;
            case 0x13: result = (19 as nat); break;
            case 0x14: result = (20 as nat); break;
            case 0x15: result = (21 as nat); break;
            case 0x16: result = (22 as nat); break;
            case 0x17: result = (23 as nat); break;
            case 0x18: result = (24 as nat); break;
            case 0x19: result = (25 as nat); break;
            case 0x1A: result = (26 as nat); break;
            case 0x1B: result = (27 as nat); break;
            case 0x1C: result = (28 as nat); break;
            case 0x1D: result = (29 as nat); break;
            case 0x1E: result = (30 as nat); break;
            case 0x1F: result = (31 as nat); break;
            case 0x20: result = (32 as nat); break;
            case 0x21: result = (33 as nat); break;
            case 0x22: result = (34 as nat); break;
            case 0x23: result = (35 as nat); break;
            case 0x24: result = (36 as nat); break;
            case 0x25: result = (37 as nat); break;
            case 0x26: result = (38 as nat); break;
            case 0x27: result = (39 as nat); break;
            case 0x28: result = (40 as nat); break;
            case 0x29: result = (41 as nat); break;
            case 0x2A: result = (42 as nat); break;
            case 0x2B: result = (43 as nat); break;
            case 0x2C: result = (44 as nat); break;
            case 0x2D: result = (45 as nat); break;
            case 0x2E: result = (46 as nat); break;
            case 0x2F: result = (47 as nat); break;
            case 0x30: result = (48 as nat); break;
            case 0x31: result = (49 as nat); break;
            case 0x32: result = (50 as nat); break;
            case 0x33: result = (51 as nat); break;
            case 0x34: result = (52 as nat); break;
            case 0x35: result = (53 as nat); break;
            case 0x36: result = (54 as nat); break;
            case 0x37: result = (55 as nat); break;
            case 0x38: result = (56 as nat); break;
            case 0x39: result = (57 as nat); break;
            case 0x3A: result = (58 as nat); break;
            case 0x3B: result = (59 as nat); break;
            case 0x3C: result = (60 as nat); break;
            case 0x3D: result = (61 as nat); break;
            case 0x3E: result = (62 as nat); break;
            case 0x3F: result = (63 as nat); break;
            case 0x40: result = (64 as nat); break;
            case 0x41: result = (65 as nat); break;
            case 0x42: result = (66 as nat); break;
            case 0x43: result = (67 as nat); break;
            case 0x44: result = (68 as nat); break;
            case 0x45: result = (69 as nat); break;
            case 0x46: result = (70 as nat); break;
            case 0x47: result = (71 as nat); break;
            case 0x48: result = (72 as nat); break;
            case 0x49: result = (73 as nat); break;
            case 0x4A: result = (74 as nat); break;
            case 0x4B: result = (75 as nat); break;
            case 0x4C: result = (76 as nat); break;
            case 0x4D: result = (77 as nat); break;
            case 0x4E: result = (78 as nat); break;
            case 0x4F: result = (79 as nat); break;
            case 0x50: result = (80 as nat); break;
            case 0x51: result = (81 as nat); break;
            case 0x52: result = (82 as nat); break;
            case 0x53: result = (83 as nat); break;
            case 0x54: result = (84 as nat); break;
            case 0x55: result = (85 as nat); break;
            case 0x56: result = (86 as nat); break;
            case 0x57: result = (87 as nat); break;
            case 0x58: result = (88 as nat); break;
            case 0x59: result = (89 as nat); break;
            case 0x5A: result = (90 as nat); break;
            case 0x5B: result = (91 as nat); break;
            case 0x5C: result = (92 as nat); break;
            case 0x5D: result = (93 as nat); break;
            case 0x5E: result = (94 as nat); break;
            case 0x5F: result = (95 as nat); break;
            case 0x60: result = (96 as nat); break;
            case 0x61: result = (97 as nat); break;
            case 0x62: result = (98 as nat); break;
            case 0x63: result = (99 as nat); break;
            case 0x64: result = (100 as nat); break;
            case 0x65: result = (101 as nat); break;
            case 0x66: result = (102 as nat); break;
            case 0x67: result = (103 as nat); break;
            case 0x68: result = (104 as nat); break;
            case 0x69: result = (105 as nat); break;
            case 0x6A: result = (106 as nat); break;
            case 0x6B: result = (107 as nat); break;
            case 0x6C: result = (108 as nat); break;
            case 0x6D: result = (109 as nat); break;
            case 0x6E: result = (110 as nat); break;
            case 0x6F: result = (111 as nat); break;
            case 0x70: result = (112 as nat); break;
            case 0x71: result = (113 as nat); break;
            case 0x72: result = (114 as nat); break;
            case 0x73: result = (115 as nat); break;
            case 0x74: result = (116 as nat); break;
            case 0x75: result = (117 as nat); break;
            case 0x76: result = (118 as nat); break;
            case 0x77: result = (119 as nat); break;
            case 0x78: result = (120 as nat); break;
            case 0x79: result = (121 as nat); break;
            case 0x7A: result = (122 as nat); break;
            case 0x7B: result = (123 as nat); break;
            case 0x7C: result = (124 as nat); break;
            case 0x7D: result = (125 as nat); break;
            case 0x7E: result = (126 as nat); break;
            case 0x7F: result = (127 as nat); break;
            case 0x80: result = (128 as nat); break;
            case 0x81: result = (129 as nat); break;
            case 0x82: result = (130 as nat); break;
            case 0x83: result = (131 as nat); break;
            case 0x84: result = (132 as nat); break;
            case 0x85: result = (133 as nat); break;
            case 0x86: result = (134 as nat); break;
            case 0x87: result = (135 as nat); break;
            case 0x88: result = (136 as nat); break;
            case 0x89: result = (137 as nat); break;
            case 0x8A: result = (138 as nat); break;
            case 0x8B: result = (139 as nat); break;
            case 0x8C: result = (140 as nat); break;
            case 0x8D: result = (141 as nat); break;
            case 0x8E: result = (142 as nat); break;
            case 0x8F: result = (143 as nat); break;
            case 0x90: result = (144 as nat); break;
            case 0x91: result = (145 as nat); break;
            case 0x92: result = (146 as nat); break;
            case 0x93: result = (147 as nat); break;
            case 0x94: result = (148 as nat); break;
            case 0x95: result = (149 as nat); break;
            case 0x96: result = (150 as nat); break;
            case 0x97: result = (151 as nat); break;
            case 0x98: result = (152 as nat); break;
            case 0x99: result = (153 as nat); break;
            case 0x9A: result = (154 as nat); break;
            case 0x9B: result = (155 as nat); break;
            case 0x9C: result = (156 as nat); break;
            case 0x9D: result = (157 as nat); break;
            case 0x9E: result = (158 as nat); break;
            case 0x9F: result = (159 as nat); break;
            case 0xA0: result = (160 as nat); break;
            case 0xA1: result = (161 as nat); break;
            case 0xA2: result = (162 as nat); break;
            case 0xA3: result = (163 as nat); break;
            case 0xA4: result = (164 as nat); break;
            case 0xA5: result = (165 as nat); break;
            case 0xA6: result = (166 as nat); break;
            case 0xA7: result = (167 as nat); break;
            case 0xA8: result = (168 as nat); break;
            case 0xA9: result = (169 as nat); break;
            case 0xAA: result = (170 as nat); break;
            case 0xAB: result = (171 as nat); break;
            case 0xAC: result = (172 as nat); break;
            case 0xAD: result = (173 as nat); break;
            case 0xAE: result = (174 as nat); break;
            case 0xAF: result = (175 as nat); break;
            case 0xB0: result = (176 as nat); break;
            case 0xB1: result = (177 as nat); break;
            case 0xB2: result = (178 as nat); break;
            case 0xB3: result = (179 as nat); break;
            case 0xB4: result = (180 as nat); break;
            case 0xB5: result = (181 as nat); break;
            case 0xB6: result = (182 as nat); break;
            case 0xB7: result = (183 as nat); break;
            case 0xB8: result = (184 as nat); break;
            case 0xB9: result = (185 as nat); break;
            case 0xBA: result = (186 as nat); break;
            case 0xBB: result = (187 as nat); break;
            case 0xBC: result = (188 as nat); break;
            case 0xBD: result = (189 as nat); break;
            case 0xBE: result = (190 as nat); break;
            case 0xBF: result = (191 as nat); break;
            case 0xC0: result = (192 as nat); break;
            case 0xC1: result = (193 as nat); break;
            case 0xC2: result = (194 as nat); break;
            case 0xC3: result = (195 as nat); break;
            case 0xC4: result = (196 as nat); break;
            case 0xC5: result = (197 as nat); break;
            case 0xC6: result = (198 as nat); break;
            case 0xC7: result = (199 as nat); break;
            case 0xC8: result = (200 as nat); break;
            case 0xC9: result = (201 as nat); break;
            case 0xCA: result = (202 as nat); break;
            case 0xCB: result = (203 as nat); break;
            case 0xCC: result = (204 as nat); break;
            case 0xCD: result = (205 as nat); break;
            case 0xCE: result = (206 as nat); break;
            case 0xCF: result = (207 as nat); break;
            case 0xD0: result = (208 as nat); break;
            case 0xD1: result = (209 as nat); break;
            case 0xD2: result = (210 as nat); break;
            case 0xD3: result = (211 as nat); break;
            case 0xD4: result = (212 as nat); break;
            case 0xD5: result = (213 as nat); break;
            case 0xD6: result = (214 as nat); break;
            case 0xD7: result = (215 as nat); break;
            case 0xD8: result = (216 as nat); break;
            case 0xD9: result = (217 as nat); break;
            case 0xDA: result = (218 as nat); break;
            case 0xDB: result = (219 as nat); break;
            case 0xDC: result = (220 as nat); break;
            case 0xDD: result = (221 as nat); break;
            case 0xDE: result = (222 as nat); break;
            case 0xDF: result = (223 as nat); break;
            case 0xE0: result = (224 as nat); break;
            case 0xE1: result = (225 as nat); break;
            case 0xE2: result = (226 as nat); break;
            case 0xE3: result = (227 as nat); break;
            case 0xE4: result = (228 as nat); break;
            case 0xE5: result = (229 as nat); break;
            case 0xE6: result = (230 as nat); break;
            case 0xE7: result = (231 as nat); break;
            case 0xE8: result = (232 as nat); break;
            case 0xE9: result = (233 as nat); break;
            case 0xEA: result = (234 as nat); break;
            case 0xEB: result = (235 as nat); break;
            case 0xEC: result = (236 as nat); break;
            case 0xED: result = (237 as nat); break;
            case 0xEE: result = (238 as nat); break;
            case 0xEF: result = (239 as nat); break;
            case 0xF0: result = (240 as nat); break;
            case 0xF1: result = (241 as nat); break;
            case 0xF2: result = (242 as nat); break;
            case 0xF3: result = (243 as nat); break;
            case 0xF4: result = (244 as nat); break;
            case 0xF5: result = (245 as nat); break;
            case 0xF6: result = (246 as nat); break;
            case 0xF7: result = (247 as nat); break;
            case 0xF8: result = (248 as nat); break;
            case 0xF9: result = (249 as nat); break;
            case 0xFA: result = (250 as nat); break;
            case 0xFB: result = (251 as nat); break;
            case 0xFC: result = (252 as nat); break;
            case 0xFD: result = (253 as nat); break;
            case 0xFE: result = (254 as nat); break;
            case 0xFF: result = (255 as nat); break;

            default: result = (failwith("Wrong hexa") as nat);
        };
        return result;
    };

    export const bytes_to_nat = (payload : bytes) : nat => {
        let convert_to_nat = ([acc, indice, payload] : [nat, nat, bytes]) : nat => {
            if (indice == (1 as nat)) {
                return acc + hexa_to_nat(payload)
            } 
            else {
                let size : nat = Bytes.length(payload);
                let one_left_bytes = Bytes.sub(0 as nat, 1 as nat, payload);
                let right_bytes = Bytes.sub(1 as nat, abs(size - (1 as nat)), payload);
                let one_left_nat = hexa_to_nat(one_left_bytes) * power((256 as nat), abs(indice - (1 as nat)));
                return convert_to_nat(acc + one_left_nat, abs(indice - (1 as nat)), right_bytes)
            }
        };
        convert_to_nat(0 as nat, Bytes.length(payload), payload)
    };

}